import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// ===========================
// (1) BASE CLASS & INHERITANCE
// ===========================
abstract class Person {
    protected int id;
    protected String username;

    public Person(int id, String username) {
        this.id = id;
        this.username = username;
    }

    public int getId() { return id; }
    public String getUsername() { return username; }
}

// ===========================
// (1.1) MODEL CLASS: USER EXTENDS PERSON
// ===========================
class User extends Person {
    private String email;
    private String password;
    private String phoneNumber;

    public User(int id, String username, String email, String password, String phoneNumber) {
        super(id, username);
        this.email = email;
        this.password = password;
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() { return email; }
    public String getPassword() { return password; }
    public String getPhoneNumber() { return phoneNumber; }
}

class Payment {
    private int id;
    private String payer;   // phone number
    private String payee;   // phone number
    private double amount;
    private LocalDateTime timestamp;

    public Payment(int id, String payer, String payee, double amount, LocalDateTime timestamp) {
        this.id = id;
        this.payer = payer;
        this.payee = payee;
        this.amount = amount;
        this.timestamp = timestamp;
    }

    public int getId() { return id; }
    public String getPayer() { return payer; }
    public String getPayee() { return payee; }
    public double getAmount() { return amount; }
    public LocalDateTime getTimestamp() { return timestamp; }
}

// ===========================
// (2) ABSTRACTION
// ===========================
abstract class BaseDAO {
    public abstract void registerUser(int id, String username, String email, String password, String phoneNumber);
    public abstract boolean login(String identifier, String password);
    public abstract void logout();
    public abstract User getCurrentUser();
    public abstract void addPayment(Payment p);
    public abstract List<Payment> getAllPayments();
    public abstract double getBalance(String phoneNumber);
    public abstract List<User> getAllUsers();
    public abstract boolean isUserExists(String phoneNumber);
    public abstract boolean hasSufficientBalance(String phoneNumber, double amount);
}

// ===========================
// (2.1) DAO CLASS
// ===========================
class PaymentDAO extends BaseDAO {
    private List<User> users = new ArrayList<>();
    private List<Payment> payments = new ArrayList<>();
    private Map<String, Double> balances = new HashMap<>();
    private Map<String, User> phoneToUserMap = new HashMap<>();
    private Map<String, User> emailToUserMap = new HashMap<>();
    private User currentUser = null;

    @Override
    public void registerUser(int id, String username, String email, String password, String phoneNumber) {
        User user = new User(id, username, email, password, phoneNumber);
        users.add(user);
        balances.put(phoneNumber, 1000.0);
        phoneToUserMap.put(phoneNumber, user);
        emailToUserMap.put(email.toLowerCase(), user);
    }

    @Override
    public boolean login(String identifier, String password) {
        User user;
        if (identifier.contains("@")) {
            user = emailToUserMap.get(identifier.toLowerCase());
        } else {
            user = phoneToUserMap.get(identifier);
        }

        if (user != null && user.getPassword().equals(password)) {
            currentUser = user;
            return true;
        }
        return false;
    }

    @Override
    public void logout() { currentUser = null; }

    @Override
    public User getCurrentUser() { return currentUser; }

    @Override
    public void addPayment(Payment p) {
        payments.add(p);
        balances.put(p.getPayer(), balances.get(p.getPayer()) - p.getAmount());
        balances.put(p.getPayee(), balances.getOrDefault(p.getPayee(), 0.0) + p.getAmount());
    }

    @Override
    public List<Payment> getAllPayments() { return payments; }

    @Override
    public double getBalance(String phoneNumber) {
        return balances.getOrDefault(phoneNumber, 0.0);
    }

    @Override
    public List<User> getAllUsers() {
        return users;
    }

    @Override
    public boolean isUserExists(String phoneNumber) {
        return phoneToUserMap.containsKey(phoneNumber);
    }

    @Override
    public boolean hasSufficientBalance(String phoneNumber, double amount) {
        return balances.getOrDefault(phoneNumber, 0.0) >= amount;
    }
}

// ===========================
// (3) POLYMORPHISM + METHOD OVERRIDING
// ===========================
abstract class NotificationService {
    public abstract void send(String to, double amount);
}

class EmailNotification extends NotificationService {
    @Override
    public void send(String to, double amount) {
        System.out.println("Email sent to " + to + ": ₹" + amount + " transferred.");
    }
}

class SMSNotification extends NotificationService {
    @Override
    public void send(String to, double amount) {
        System.out.println("SMS sent to " + to + ": ₹" + amount + " transferred.");
    }
}

// ===========================
// (4) MULTITHREADING
// ===========================
class PaymentThread implements Runnable {
    private PaymentDAO dao;
    private Payment payment;
    private NotificationService notifier;

    public PaymentThread(PaymentDAO dao, Payment payment, NotificationService notifier) {
        this.dao = dao;
        this.payment = payment;
        this.notifier = notifier;
    }

    @Override
    public void run() {
        try {
            Thread.sleep(1000); // Simulate delay
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        dao.addPayment(payment);
        notifier.send(payment.getPayee(), payment.getAmount());
    }
}

// ===========================
// (5) UI CLASS
// ===========================
class PaymentUI extends JFrame {
    private PaymentDAO dao;
    private JTextField payeeField = new JTextField(10);
    private JTextField amountField = new JTextField(10);

    private DefaultTableModel tableModel = new DefaultTableModel(
            new String[]{"ID", "Payer (Name & Phone)", "Payee (Name & Phone)", "Amount", "Date", "Time"}, 0);
    private JTable table = new JTable(tableModel);
    private JLabel currentUserLabel = new JLabel("Not logged in");

    public PaymentUI(PaymentDAO dao) {
        this.dao = dao;
        setTitle("Payment App");
        setSize(950, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel top = new JPanel(new BorderLayout());
        top.add(currentUserLabel, BorderLayout.WEST);

        JPanel input = new JPanel();
        input.add(new JLabel("Payee Phone:"));
        input.add(payeeField);
        input.add(new JLabel("Amount:"));
        input.add(amountField);
        JButton sendBtn = new JButton("Send Money");
        input.add(sendBtn);

        JScrollPane scroll = new JScrollPane(table);

        JPanel buttons = new JPanel();
        String[] menu = {"Register", "Login", "Check Balance", "Show Users", "Logout", "Exit"};
        for (String m : menu) {
            JButton b = new JButton(m);
            b.addActionListener(e -> handleAction(m));
            buttons.add(b);
        }

        sendBtn.addActionListener(e -> sendMoney());

        add(top, BorderLayout.NORTH);
        add(input, BorderLayout.CENTER);
        add(scroll, BorderLayout.EAST);
        add(buttons, BorderLayout.SOUTH);

        setVisible(true);
    }

    private void handleAction(String action) {
        switch (action) {
            case "Register":
                try {
                    int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter ID:"));
                    String username = JOptionPane.showInputDialog(this, "Enter username:");
                    String email = JOptionPane.showInputDialog(this, "Enter email:");
                    String password = JOptionPane.showInputDialog(this, "Enter password:");
                    String phone = JOptionPane.showInputDialog(this, "Enter phone number:");
                    if (id <= 0 || username.isEmpty() || email.isEmpty() || password.isEmpty() || phone.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "All fields are required!");
                        break;
                    }
                    dao.registerUser(id, username, email, password, phone);
                    JOptionPane.showMessageDialog(this, "User registered!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Invalid input.");
                }
                break;

            case "Login":
                try {
                    String identifier = JOptionPane.showInputDialog(this, "Enter email or phone number:");
                    String password = JOptionPane.showInputDialog(this, "Enter password:");
                    if (dao.login(identifier, password)) {
                        currentUserLabel.setText("Logged in as: " + dao.getCurrentUser().getUsername());
                        JOptionPane.showMessageDialog(this, "Login successful!");
                        loadPayments();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid email/phone or password!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Invalid input.");
                }
                break;

            case "Check Balance":
                if (dao.getCurrentUser() != null) {
                    String phone = dao.getCurrentUser().getPhoneNumber();
                    double bal = dao.getBalance(phone);
                    JOptionPane.showMessageDialog(this, "Balance: ₹" + bal);
                } else {
                    JOptionPane.showMessageDialog(this, "Login required!");
                }
                break;

            case "Show Users":
                if (dao.getCurrentUser() != null) {
                    StringBuilder sb = new StringBuilder("Users:\n");
                    for (User u : dao.getAllUsers()) {
                        sb.append("ID: ").append(u.getId())
                                .append(", Username: ").append(u.getUsername())
                                .append(", Email: ").append(u.getEmail())
                                .append(", Phone: ").append(u.getPhoneNumber()).append("\n");
                    }
                    JOptionPane.showMessageDialog(this, sb.toString());
                } else {
                    JOptionPane.showMessageDialog(this, "Login required!");
                }
                break;

            case "Logout":
                dao.logout();
                currentUserLabel.setText("Not logged in");
                JOptionPane.showMessageDialog(this, "Logged out.");
                tableModel.setRowCount(0);
                break;

            case "Exit":
                System.exit(0);
                break;
        }
    }

    private void sendMoney() {
        if (dao.getCurrentUser() == null) {
            JOptionPane.showMessageDialog(this, "Login required!");
            return;
        }

        String payeePhone = payeeField.getText().trim();
        double amount;
        try {
            amount = Double.parseDouble(amountField.getText().trim());
            if (amount <= 0) throw new Exception();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid amount.");
            return;
        }

        String payerPhone = dao.getCurrentUser().getPhoneNumber();

        if (!dao.isUserExists(payeePhone)) {
            JOptionPane.showMessageDialog(this, "Payee not found.");
            return;
        }

        if (!dao.hasSufficientBalance(payerPhone, amount)) {
            JOptionPane.showMessageDialog(this, "Insufficient balance.");
            return;
        }

        int id = dao.getAllPayments().size() + 1;
        Payment p = new Payment(id, payerPhone, payeePhone, amount, LocalDateTime.now());

        NotificationService notifier = new SMSNotification(); // Use polymorphism
        Thread t = new Thread(new PaymentThread(dao, p, notifier)); // Multithreading
        t.start();

        JOptionPane.showMessageDialog(this, "Payment is being processed...");
        payeeField.setText("");
        amountField.setText("");
        loadPayments();
    }

    private void loadPayments() {
        tableModel.setRowCount(0);

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        for (Payment p : dao.getAllPayments()) {
            User payerUser = dao.getAllUsers().stream()
                    .filter(u -> u.getPhoneNumber().equals(p.getPayer()))
                    .findFirst().orElse(null);
            User payeeUser = dao.getAllUsers().stream()
                    .filter(u -> u.getPhoneNumber().equals(p.getPayee()))
                    .findFirst().orElse(null);

            String payerInfo = (payerUser != null) ? "<html>" + payerUser.getUsername() + "<br/>(" + payerUser.getPhoneNumber() + ")</html>" : p.getPayer();
            String payeeInfo = (payeeUser != null) ? "<html>" + payeeUser.getUsername() + "<br/>(" + payeeUser.getPhoneNumber() + ")</html>" : p.getPayee();

            String dateStr = p.getTimestamp().format(dateFormatter);
            String timeStr = p.getTimestamp().format(timeFormatter);

            tableModel.addRow(new Object[]{p.getId(), payerInfo, payeeInfo, p.getAmount(), dateStr, timeStr});
        }

        table.setRowHeight(30);
    }
}

// ===========================
// (6) MAIN METHOD
// ===========================
public class PaymentApplicationguviproject {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new PaymentUI(new PaymentDAO()));
    }
}
